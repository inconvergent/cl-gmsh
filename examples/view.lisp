#!/usr/local/bin/sbcl --script

(load "~/quicklisp/setup.lisp") (require :sb-sprof)
(ql:quickload :gmsh)
(defvar *window-size* 1500) (defvar *pid* 0)

(veq:fvdef load-scene (fn &aux (sc (gmsh/scene:scene/load fn)))
  (gmsh/scene:scene/new-canv sc)
  (lqn:out "loaded scene: ~a" fn)
  (gmsh/scene:scale-to! sc *window-size* )
  (print sc))

(veq:fvdef main (&aux (srcfile cl-user::*load-truename*))
  (gmsh/gl:window-context (*window-size* *window-size*)
    (let* ((sc (load-scene "_box.gmsh-scene"))
           (cam (gmsh/scene:@cam sc))
           (itt 0))

      (veq:mvb (render-init render render-clean program) (gmsh/gl:make-render sc)
        (funcall render-init)
        (sdl2:with-event-loop (:method :poll)
          (:controllerdeviceadded (:type ty :which which)
            (lqn:out "~&██ ~a ~a~&" ty which)
            (gmsh/gl:init-controller controllers))
          (:controlleraxismotion (:value v :which w :axis ax)
                                 (gmsh/scene::update-axis sc ax v))
          (:controllerbuttondown (:state state :which which :button b :type ty)
            ; (lqn:out "~&██ btn: ~a~&" b)
            (case b (0  (setf *pid* (mod (1+ *pid*) (length gmsh:*programs*))) ; roll program
                        (funcall program (aref gmsh:*programs* *pid*))
                        (funcall render-init))
                    (9  (gmsh/cam:nav/s! cam (+ (ecase (gmsh/cam:@proj-mode cam) (:persp 0.005) (:ortho 10.0)))))
                    (10 (gmsh/cam:nav/s! cam (- (ecase (gmsh/cam:@proj-mode cam) (:persp 0.005) (:ortho 10.0)))))
                    (11 (gmsh/cam:nav/near! cam (+ (ecase (gmsh/cam:@proj-mode cam) (:persp 0.005) (:ortho 10.0)))))
                    (12 (gmsh/cam:nav/near! cam (- (ecase (gmsh/cam:@proj-mode cam) (:persp 0.005) (:ortho 10.0)))))
                    (7  (gmsh/cam:roll-nav-mode cam)  (print (gmsh/cam:@nav-mode cam)))
                    (8  (gmsh/cam:roll-proj-mode cam) (print (gmsh/cam:@proj-mode cam)))
                    (4  (print sc))))
          (:keydown (:keysym keysym)
            (case (sdl2:scancode keysym)
                  (:scancode-e (gmsh/scene:scene/save sc (fn:fn) :srcfile srcfile))))
          (:idle () (let ((t0 (veq:ff (get-internal-real-time))))
                      (finish-output)
                      (when run (gmsh/scene:update-view sc) (f@render))
                      (sdl2:gl-swap-window win)
                      (gmsh/gl:show-diag (incf itt) t0)))
          (:quit () (f@render-clean) t))))))
(main)

