(in-package #:gmsh-tests)

(plan 3)

(subtest "gmsh"
(veq:fvprogn
  (let ((msh (gmsh:gmsh :max-verts 100)))
    (gmsh:add-vert! msh 1f0 2f0 3f0)
    (gmsh:add-vert! msh 3f0 3f0 4.330)
    (gmsh:add-vert! msh 4f0 2f0 4.0)
    (gmsh:add-vert! msh 9f0 7f0 4.30)
    (is (gmsh:add-poly! msh '(2 0 1)) '(0 1 2))
    ; (is-warning (gmsh:add-poly! msh '(2 0 1))) ; TODO
    (is-error (gmsh:add-poly! msh '(3 3 1)) 'simple-error)
    (is (gmsh:add-poly! msh '(1 2 3)) '(1 2 3))
    (is (gmsh:add-poly! msh '(1 0 3)) '(0 3 1))
    (is (gmsh:get-all-polys msh) '((0 1 2) (1 2 3) (0 3 1)))
    (is (gmsh:del-poly! msh '(1 0 3)) nil) ; only delets literal poly matches
    (is (gmsh:del-poly! msh '(0 3 1)) '(0 3 1))
    (is (gmsh:get-all-polys msh) '((0 1 2) (1 2 3)))

    (is (gmsh:get-connected-verts msh) '(0 1 2 3))
    (is (veq:lst (gmsh:get-vert msh 2)) '(4.0 2.0 4.0))
    (is-arr (gmsh:get-verts msh '(2 3)) #(4.0 2.0 4.0 9.0 7.0 4.3))
    )))

(subtest "gmsh obj/bvh"
(veq:fvprogn

;   (let* ((msh (gmsh:obj-load (model :cube) :silent t))
;          (lmsh (gmsh:obj-load (model :teapot) :silent t))
;          (bvh (gmsh:make-bvh msh :num 2 :mode :stackless))
;          (sbvh (gmsh:make-bvh msh :num 2 :mode :small))
;          ; (bvh4 (gmsh:make-bvh lmsh :num 3 :mode :bvh4))
;          (bvh4-simd (gmsh:make-bvh lmsh :num 3 :mode :bvh4-simd))
;          )
;     (is-arr (gmsh:get-verts msh (list 2 1 2 4 7 6))
;             #(-1.0 -1.0 1.0 1.0 -1.0 1.0 -1.0 -1.0 1.0 1.0 1.0 -0.999999
;                    -1.0 1.0 -1.0 -1.0 1.0 1.0))
;     (is (gmsh:get-all-polys msh)
;         '((1 2 3) (5 7 6) (1 4 5) (2 5 6) (2 6 7) (0 3 7)
;           (0 1 3) (4 7 5) (0 4 1) (1 5 2) (2 7 3) (0 7 4)))
;     (is (gmsh:add-poly! msh '(7 6 0)) '(0 7 6))

;     (is-arr (gmsh/bvh::bvh-nodes sbvh)
;             #(-555 -555 1 -555 -555 3 -555 -555 9 -555 -555 5 -555 -555 7 2 0 -555 1 2
;               -555 2 3 -555 1 5 -555 -555 -555 11 -555 -555 13 2 6 -555 1 8 -555 2 9
;               -555 1 11 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555
;               -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555
;               -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555
;               -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555 -555
;               -555 -555 -555 -555 -555 -555 -555 -555 -555 -555))

;     (is-arr (f3.@$identity (?@ (gmsh/bvh::bvh-mima bvh) 0 32))
;             #(-1.0 -1.0 -1.0 1.0 1.0 1.000001 -1.0 -1.0 -1.0 1.0 1.0 1.000001 -1.0 -1.0
;               -1.0 1.0 1.0 1.000001 -1.0 -1.0 -1.0 1.0 1.0 1.000001 -1.0 -1.0 -1.0 1.0
;               1.0 1.000001 -1.0 -1.0 -1.0 1.0 1.0 1.000001 -1.0 -1.0 -1.0 -1.0 1.0 1.0
;               -1.0 -1.0 -1.0 1.0 1.0 1.0 -1.0 1.0 -1.0 1.0 1.0 1.000001 -1.0 -1.0 -1.0
;               1.0 1.0 1.0 -1.0 -1.0 -0.999999 1.0 1.0 1.000001 -1.0 -1.0 -1.0 1.0 1.0
;               1.0 1.0 -1.0 -1.0 1.0 1.0 1.0 -1.0 -1.0 1.0 1.0 1.0 1.000001 0.999999
;               -1.0 -0.999999 1.0 1.0 1.000001 0.0 0.0 0.0 0.0 0.0 0.0))

;     (is-arr (gmsh/bvh::bvh-nodes bvh)
;             #(-555 -555 1 -999 -555 -555 3 2 -555 -555 9 -999 -555 -555 5 4 -555 -555 7
;               2 2 0 -555 6 1 2 -555 4 2 3 -555 8 1 5 -555 2 -555 -555 11 10 -555 -555
;               13 -999 2 6 -555 12 1 8 -555 10 2 9 -555 14 1 11 -555 -999 -555 -555 -555
;               -999 -555 -555 -555 -999 -555 -555 -555 -999 -555 -555 -555 -999 -555
;               -555 -555 -999 -555 -555 -555 -999 -555 -555 -555 -999 -555 -555 -555
;               -999 -555 -555 -555 -999 -555 -555 -555 -999 -555 -555 -555 -999 -555
;               -555 -555 -999 -555 -555 -555 -999 -555 -555 -555 -999 -555 -555 -555
;               -999 -555 -555 -555 -999 -555 -555 -555 -999 -555 -555 -555 -999 -555
;               -555 -555 -999 -555 -555 -555 -999 -555 -555 -555 -999))

;     ; (is-arr (i3.@$identity (?@ (gmsh/bvh::bvh-nodes bvh4) 0 128))
;     ;         #(0 0 0 0 0 0 0 0 1 2 3 4 0 0 0 0 0 0 0 0 1025 1026 1027 1028 0 0 0 0 0 0 0
;     ;     0 685 686 687 688 0 0 0 0 0 0 0 0 345 346 347 348 0 0 0 0 0 0 0 0 5 6 7 8
;     ;     0 0 0 0 0 0 0 0 261 262 263 264 0 0 0 0 0 0 0 0 177 178 179 180 0 0 0 0 0
;     ;     0 0 0 93 94 95 96 0 0 0 0 0 0 0 0 9 10 11 12 0 0 0 0 0 0 0 0 73 74 75 76
;     ;     0 0 0 0 0 0 0 0 53 54 55 56 0 0 0 0 0 0 0 0 33 34 35 36 0 0 0 0 0 0 0 0
;     ;     13 14 15 16 0 0 0 0 0 0 0 0 29 30 31 32 0 0 0 0 0 0 0 0 25 26 27 28 0 0 0
;     ;     0 0 0 0 0 21 22 23 24 0 0 0 0 0 0 0 0 17 18 19 20 3 0 3 0 6295 0 6298 0
;     ;     -1 0 -1 0 3 0 3 0 6301 0 6304 0 -1 0 -1 0 3 0 3 0 6307 0 6310 0 -1 0 -1 0
;     ;     2 2 3 0 6313 6315 6317 0 -1 -1 -1 0 3 0 3 0 6271 0 6274 0 -1 0 -1 0 3 0 3
;     ;     0 6277 0 6280 0 -1 0 -1 0 3 0 3 0 6283 0 6286 0 -1 0 -1 0 3 0 3 0 6289 0
;     ;     6292 0 -1 0 -1 0 3 0 3 0 6246 0 6249 0 -1 0 -1 0 3 0 3 0 6252 0 6255 0 -1
;     ;     0 -1 0 3 0 3 0 6258 0 6261 0 -1 0 -1 0 2 2 3 0 6264 6266 6268 0 -1 -1 -1
;     ;     0 3 0 3 0 6221 0 6224 0 -1 0 -1 0 3 0 3 0 6227 0 6230 0 -1 0 -1 0 3 0 3 0
;     ;     6233 0 6236 0 -1 0 -1 0)
;     ;          )

;     (is-arr (i3.@$identity (?@ (gmsh/bvh::bvh-nodes bvh4-simd) 0 128))
;             #(0 0 0 0 0 0 0 0 1 2 3 4 0 0 0 0 0 0 0 0 1025 1026 1027 1028 0 0 0 0 0 0 0
;         0 685 686 687 688 0 0 0 0 0 0 0 0 345 346 347 348 0 0 0 0 0 0 0 0 5 6 7 8
;         0 0 0 0 0 0 0 0 261 262 263 264 0 0 0 0 0 0 0 0 177 178 179 180 0 0 0 0 0
;         0 0 0 93 94 95 96 0 0 0 0 0 0 0 0 9 10 11 12 0 0 0 0 0 0 0 0 73 74 75 76
;         0 0 0 0 0 0 0 0 53 54 55 56 0 0 0 0 0 0 0 0 33 34 35 36 0 0 0 0 0 0 0 0
;         13 14 15 16 0 0 0 0 0 0 0 0 29 30 31 32 0 0 0 0 0 0 0 0 25 26 27 28 0 0 0
;         0 0 0 0 0 21 22 23 24 0 0 0 0 0 0 0 0 17 18 19 20 3 0 3 0 6295 0 6298 0
;         -1 0 -1 0 3 0 3 0 6301 0 6304 0 -1 0 -1 0 3 0 3 0 6307 0 6310 0 -1 0 -1 0
;         2 2 3 0 6313 6315 6317 0 -1 -1 -1 0 3 0 3 0 6271 0 6274 0 -1 0 -1 0 3 0 3
;         0 6277 0 6280 0 -1 0 -1 0 3 0 3 0 6283 0 6286 0 -1 0 -1 0 3 0 3 0 6289 0
;         6292 0 -1 0 -1 0 3 0 3 0 6246 0 6249 0 -1 0 -1 0 3 0 3 0 6252 0 6255 0 -1
;         0 -1 0 3 0 3 0 6258 0 6261 0 -1 0 -1 0 2 2 3 0 6264 6266 6268 0 -1 -1 -1
;         0 3 0 3 0 6221 0 6224 0 -1 0 -1 0 3 0 3 0 6227 0 6230 0 -1 0 -1 0 3 0 3 0
;         6233 0 6236 0 -1 0 -1 0)
;              )

;     ; (is-arr (f3.@$identity (?@ (gmsh/bvh::bvh-mima bvh4) 0 64))
;     ;         #(-3.0 0.0 -2.0 -3.0 0.0 0.0 0.0 0.0 -2.0 0.0 0.0 0.0 0.0 3.15 0.0 0.0 3.15
;     ;           2.0 3.434 3.15 0.0 3.434 3.15 2.0 -3.0 0.084525 -1.42 -1.48068 0.0 -2.0
;     ;           -2.94 1.929525 -1.565204 -0.762958 2.0856 -1.648 -1.26664 2.0856 0.0 0.0
;     ;           2.0856 0.0 -0.502408 2.5728 0.0 0.0 3.15 0.0 -3.0 0.1056 0.0 -1.496475
;     ;           0.0 -0.0 -2.94 1.929525 0.0 -0.69444 1.929525 0.0 -1.29504 2.0856 1.42
;     ;           0.0 2.0856 2.0 -0.502408 2.5728 1.631925 -0.0 3.15 1.71825 0.0 0.0 -2.0
;     ;           -0.0 2.463 -1.439025 0.99541 0.0312 -1.61856 0.996219 1.929525 -1.390545
;     ;           1.18996 2.482687 0.0 1.125061 3.15 0.0 2.9224 2.110488 -0.0 3.434 2.5026
;     ;           0.0 0.0 0.0 0.0 0.0 2.463 -0.0 0.99541 0.0312 0.0 0.994 1.919976 0.0
;     ;           1.219958 2.482687 2.0 1.144271 3.15 1.439025 2.9224 2.110488 1.61856
;     ;           3.434 2.5026 1.219958 0.0 0.0 0.0 0.0 0.0312 1.086146 0.0 0.4632 1.17008
;     ;           0.0 2.0856 0.557774 1.1436 0.2136 1.267832 1.14168 0.553725 1.892
;     ;           1.219958 2.242575 2.0 1.17008 2.482687 1.57475 0.0 2.6592 0.0 0.165941
;     ;           2.5026 -0.0 0.0 2.4744 0.198374 0.0 2.463 0.509349 0.274928 3.15 0.3088
;     ;           1.1002 3.14145 0.351008 1.144271 3.1176 0.639758 1.135521 2.5974 1.439025
;     ;           1.017621 0.0312 0.0 0.99541 0.0312 0.47856 1.020503 0.9 0.0 2.116979
;     ;           0.90624 0.0 2.4929 1.075572 0.69444 1.89952 1.037175 1.61856 2.244947
;     ;           1.929525 1.612693 2.9224 2.110488 0.46302))

;     (is-arr (f3.@$identity (?@ (gmsh/bvh::bvh-mima bvh4-simd) 0 64))
;             #(-3.0 -3.0 0.0 0.0 0.0 0.0 3.434 3.434 0.0 0.0 0.0 0.0 3.15 3.15 3.15 3.15
;               -2.0 0.0 -2.0 0.0 0.0 2.0 0.0 2.0 -3.0 -1.48068 -2.94 -0.762958 -1.26664
;               0.0 -0.502408 0.0 0.084525 0.0 1.929525 2.0856 2.0856 2.0856 2.5728 3.15
;               -1.42 -2.0 -1.565204 -1.648 0.0 0.0 0.0 0.0 -3.0 -1.496475 -2.94 -0.69444
;               -1.29504 0.0 -0.502408 -0.0 0.1056 0.0 1.929525 1.929525 2.0856 2.0856
;               2.5728 3.15 0.0 -0.0 0.0 0.0 1.42 2.0 1.631925 1.71825 0.0 -0.0 0.99541
;               0.996219 1.18996 1.125061 2.9224 3.434 0.0 2.463 0.0312 1.929525 2.482687
;               3.15 2.110488 2.5026 -2.0 -1.439025 -1.61856 -1.390545 0.0 0.0 -0.0 0.0
;               0.0 0.0 0.99541 0.994 1.219958 1.144271 2.9224 3.434 0.0 2.463 0.0312
;               1.919976 2.482687 3.15 2.110488 2.5026 0.0 -0.0 0.0 0.0 2.0 1.439025
;               1.61856 1.219958 0.0 0.0 0.0 0.0 1.1436 1.14168 1.219958 1.17008 0.0
;               0.0312 0.4632 2.0856 0.2136 0.553725 2.242575 2.482687 0.0 1.086146
;               1.17008 0.557774 1.267832 1.892 2.0 1.57475 0.0 0.165941 0.0 0.0 0.274928
;               1.1002 1.144271 1.135521 2.6592 2.5026 2.4744 2.463 3.15 3.14145 3.1176
;               2.5974 0.0 -0.0 0.198374 0.509349 0.3088 0.351008 0.639758 1.439025
;               1.017621 0.99541 1.020503 2.116979 2.4929 1.89952 2.244947 2.9224 0.0312
;               0.0312 0.9 0.90624 1.075572 1.037175 1.929525 2.110488 0.0 0.47856 0.0
;               0.0 0.69444 1.61856 1.612693 0.46302)))

(veq:fvdef compare-bvh-simple-rt (num msh &aux (ok12 0) (hit1 0) (hit2 0)
                                               (hit3 0) (hit4 0) (hit5 0))
  (loop with bvh2 = (gmsh:make-bvh msh :num num :mode :bvh2-stackless)
        with bvh4-simd = (gmsh:make-bvh msh :num num :mode :bvh4-simd)
        with rs = (srnd:srnd 2)
        for i from 0 repeat 5000
        do (veq:xlet ((f3!a (srnd:3in-sphere rs 4f0))
                      (f3!b (srnd:3in-sphere rs 4f0))
                      (f3!ab (f3!@- b a))
                      (h1 (gmsh/bvh:int/simple-raycast bvh2 a ab))
                      (h2 (gmsh/bvh:simd4/simple-raycast bvh4-simd a ab))
                      (h3 (gmsh/bvh:int/raycast bvh2 a ab))
                      (h4 (gmsh/bvh:simd4/raycast bvh4-simd a ab))
                      ; int/*raycast should work with :bvh4-simd version too:
                      (h5 (gmsh/bvh:int/raycast bvh4-simd a ab)))
              (when (and (= h1 h2) (= h3 h4 h5)) (incf ok12))
              (when (< h1 0.1) (incf hit1))
              (when (< h2 0.1) (incf hit2))

              (when (> h3 -1) (incf hit3))
              (when (> h4 -1) (incf hit4))
              (when (> h5 -1) (incf hit5))))
  (list ok12 hit1 hit2 hit3 hit4 hit5))

(subtest "raycast 1"
  (let* ((msh (gmsh:obj-load (model :teapot) :silent t)))
    (is (compare-bvh-simple-rt 2 msh) '(5000 2226 2226 2226 2226 2226))
    (is (compare-bvh-simple-rt 3 msh) '(5000 2226 2226 2226 2226 2226))
    (is (compare-bvh-simple-rt 4 msh) '(5000 2226 2226 2226 2226 2226))))))

(unless (finalize) (error "error in gmsh"))

